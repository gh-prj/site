{"version":3,"file":"static/js/840.16d6630a.chunk.js","mappings":"qLACA,MAA4B,0B,SCY5B,EATe,WACX,OACI,iBAAKA,UAAWC,EAAhB,WACI,SAACC,EAAD,KACA,SAACC,EAAD,QAOZ,SAASD,IACL,OAA0BE,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAUC,EAAAA,EAAAA,QAAO,GACjBC,GAAUD,EAAAA,EAAAA,QAAwB,MAIxC,OACI,wCAEI,mBAAQE,QANA,WACZJ,GAAS,SAAAK,GAAC,OAAIA,EAAI,MAKd,uBACA,wCAAgBN,EAAhB,eACA,2CAAmBE,EAAQK,QAA3B,eACA,kBAAMC,IAAKJ,EAAX,wBAAgCJ,EAAQ,IAAIS,KAAKA,KAAKC,OAAOC,qBAAuB,OACpF,2CAAmB,IAAIF,KAAKA,KAAKC,OAAOC,2BAKpD,SAASb,IACL,IAAMc,GAAST,EAAAA,EAAAA,QAAO,GAChBD,GAAUC,EAAAA,EAAAA,QAAO,GACjBC,GAAUD,EAAAA,EAAAA,QAAwB,MAClCU,ECpCH,WACL,OAAoBd,EAAAA,EAAAA,UAAS,GAApBe,GAAT,eAIA,OAHeC,EAAAA,EAAAA,cAAY,WACzBD,GAAQ,SAAAE,GAAI,OAAIA,EAAO,OACtB,IDgCmBC,GASpB,OACI,sCAEI,mBAAQZ,QAXA,WACZO,EAAOL,UACHH,EAAQG,UACRH,EAAQG,QAAQW,UAAhB,qBAA0C,IAAIT,KAAKA,KAAKC,OAAOC,wBAQ/D,uBACA,mBAAQN,QAPC,WACbQ,KAMI,2BACA,wCAAgBD,EAAOL,QAAvB,eACA,2CAAmBL,EAAQK,QAA3B,eACA,iBAAMC,IAAKJ,EAAX,0BACA,2CAAmB,IAAIK,KAAKA,KAAKC,OAAOC","sources":["webpack://gh-react-site/./src/pages/react/hooks/useRef/UseRef.module.scss?f01b","pages/react/hooks/useRef/UseRef.tsx","hooks/useForceUpdate.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UseRef_container__OrCSN\"};","import React, { useState, useRef } from 'react';\nimport { useForceUpdate } from '../../../../hooks/useForceUpdate';\nimport styles from \"./UseRef.module.scss\"\n\nconst UseRef = () => {\n    return (\n        <div className={styles.container}>\n            <ClickCounter1 />\n            <ClickCounter2 />\n        </div >\n    );\n}\n\nexport default UseRef;\n\nfunction ClickCounter1() {\n    const [count, setCount] = useState(0);\n    const refRend = useRef(0)\n    const refSpan = useRef<HTMLSpanElement>(null)\n    const onClick = () => {\n        setCount(x => x + 1)\n    }\n    return (\n        <div>\n            useState:\n            <button onClick={onClick}>Click Me</button>\n            <label>Clicked {count} time(s)</label>\n            <label>Rendered {++refRend.current} time(s)</label>\n            <span ref={refSpan}>Clicked at {count ? new Date(Date.now()).toLocaleTimeString() : \"\"}</span>\n            <span>Rendered at {new Date(Date.now()).toLocaleTimeString()}</span>\n        </div>\n    )\n}\n\nfunction ClickCounter2() {\n    const refCnt = useRef(0)\n    const refRend = useRef(0)\n    const refSpan = useRef<HTMLSpanElement>(null)\n    const forceUpdate = useForceUpdate()\n    const onClick = () => {\n        refCnt.current++\n        if (refSpan.current)\n            refSpan.current.innerText = `Clicked at ${new Date(Date.now()).toLocaleTimeString()}`\n    }\n    const onClick2 = () => {\n        forceUpdate()\n    }\n    return (\n        <div>\n            useRef:\n            <button onClick={onClick}>Click Me</button>\n            <button onClick={onClick2}>Force Update</button>\n            <label>Clicked {refCnt.current} time(s)</label>\n            <label>Rendered {++refRend.current} time(s)</label>\n            <span ref={refSpan}>Clicked at </span>\n            <span>Rendered at {new Date(Date.now()).toLocaleTimeString()}</span>\n        </div>\n    )\n}","import { useState, useCallback } from 'react'\n\nexport function useForceUpdate() {\n  const [, setTick] = useState(0);\n  const update = useCallback(() => {\n    setTick(tick => tick + 1);\n  }, [])\n  return update;\n}"],"names":["className","styles","ClickCounter1","ClickCounter2","useState","count","setCount","refRend","useRef","refSpan","onClick","x","current","ref","Date","now","toLocaleTimeString","refCnt","forceUpdate","setTick","useCallback","tick","useForceUpdate","innerText"],"sourceRoot":""}