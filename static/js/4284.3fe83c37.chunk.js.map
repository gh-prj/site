{"version":3,"file":"static/js/4284.3fe83c37.chunk.js","mappings":"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","sources":["webpack://gh-react-site/./src/pages/react/ReduxSaga/ReduxSaga.module.scss?9411","pages/react/ReduxSaga/store/countReducer.ts","pages/react/ReduxSaga/store/userReducer.ts","pages/react/ReduxSaga/saga/countSaga.ts","pages/react/ReduxSaga/saga/userSaga.ts","pages/react/ReduxSaga/saga/index.ts","pages/react/ReduxSaga/store/store.ts","pages/react/ReduxSaga/hooks/useTypedSelector.ts","pages/react/ReduxSaga/ReduxSaga.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ReduxSaga_container__cJDgZ\",\"counter\":\"ReduxSaga_counter__DKUyC\",\"users\":\"ReduxSaga_users__n2ot+\"};","interface CountState {\n    count: number\n}\n\nconst initialState: CountState = {\n    count: 0\n}\n\ninterface CountAction {\n    type: \"INCREMENT\" | \"DECREMENT\"\n}\n\nexport const countReducer = (state = initialState, action: CountAction): CountState => {\n    switch (action.type) {\n        case \"INCREMENT\":\n            return { count: state.count + 1 }\n        case \"DECREMENT\":\n            return { count: state.count - 1 }\n        default:\n            return state\n    }\n}","interface UserState {\n    users: string[]\n}\n\nconst initialState: UserState = {\n    users: []\n}\n\ninterface UserAction {\n    type: \"SET_USERS\"\n    payload: string[]\n}\n\nexport default function userReducer(state = initialState, action: UserAction): UserState {\n    switch (action.type) {\n        case \"SET_USERS\":\n            return { ...state, users: action.payload }\n        default:\n            return state\n    }\n}\n\nexport const setUsers = (payload: string[]) => ({type: \"SET_USERS\", payload})\nexport const fetchUsers = () => ({type: \"FETCH_USERS\"})","import {put, takeEvery} from 'redux-saga/effects'\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\n\nfunction* incrementWorker() {\n    yield delay(1000)\n    yield put({type: \"INCREMENT\"})\n}\n\nfunction* decrementWorker() {\n    yield delay(1000)\n    yield put({type: \"DECREMENT\"})\n}\n\nexport function* countWatcher() {\n    yield takeEvery(\"ASYNC_INCREMENT\", incrementWorker)\n    yield takeEvery(\"ASYNC_DECREMENT\", decrementWorker)\n}","import { AnyAction } from 'redux'\nimport { put, call, takeEvery, StrictEffect } from 'redux-saga/effects'\nimport { setUsers } from '../store/userReducer'\n\nconst fetchUsers = function() {\n    let prevLimit = 0\n    return () => {\n        let limit\n        do {\n            limit = Math.ceil(Math.random() * 9)\n        } while(limit === prevLimit)\n        prevLimit = limit\n        return fetch(`https://jsonplaceholder.typicode.com/users?_limit=${limit}`)\n    }\n}()\n\nfunction* fetchUsersWorker() {\n    const response: Response = yield call(fetchUsers)\n    const users: {name: string}[] = yield call(() => new Promise(resolve => resolve(response.json())))\n    yield put(setUsers(users.map(user => user.name)))\n}\n\nexport function* userWatcher() {\n    yield takeEvery(\"FETCH_USERS\", fetchUsersWorker)\n}","import { all } from 'redux-saga/effects'\nimport { countWatcher } from './countSaga'\nimport { userWatcher } from './userSaga'\n\nexport function* rootWatcher() {\n    yield all([countWatcher(), userWatcher()])\n}","import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'\nimport { countReducer } from './countReducer'\nimport createSagaMiddleware from 'redux-saga'\nimport {countWatcher} from '../saga/countSaga'\nimport userReducer from './userReducer'\nimport { rootWatcher } from \"../saga/index\";\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst rootReducer = combineReducers({\n    counter: countReducer,\n    users: userReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\nexport type RootState = ReturnType<typeof rootReducer>\n\nsagaMiddleware.run(rootWatcher)","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { RootState } from \"../store/store\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react';\nimport styles from './ReduxSaga.module.scss'\nimport { Provider, useDispatch } from 'react-redux'\nimport { store } from './store/store'\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport { setUsers, fetchUsers } from './store/userReducer';\n\nconst Counter = () => {\n    const { count } = useTypedSelector(state => state.counter)\n    const dispatch = useDispatch()\n    return (\n        <div className={styles.counter}>\n            <button onClick={() => dispatch({ type: \"ASYNC_DECREMENT\" })}>-1 After 1 sec</button>\n            <button onClick={() => dispatch({ type: \"DECREMENT\" })}>-1</button>\n            {count}\n            <button onClick={() => dispatch({ type: \"INCREMENT\" })}>+1</button>\n            <button onClick={() => dispatch({ type: \"ASYNC_INCREMENT\" })}>+1 After 1 sec</button>\n        </div>\n    )\n}\n\nconst Users = () => {\n    const { users } = useTypedSelector(state => state.users)\n    const dispatch = useDispatch()\n    return (\n        <div className={styles.users}>\n            <button onClick={() => dispatch(fetchUsers())}>Fetch Users</button>\n            {users.map((user, idx) =>\n                <div key={idx}>{user}</div>\n            )}\n        </div>\n    )\n}\nconst ReduxSaga = () => {\n    return (\n        <div className={styles.container}>\n            <Provider store={store}>\n                <Counter />\n                <Users />\n            </Provider>\n        </div>\n    );\n}\n\nexport default ReduxSaga;\n"],"names":["initialState","count","users","incrementWorker","decrementWorker","countWatcher","delay","ms","Promise","resolve","setTimeout","put","type","takeEvery","fetchUsersWorker","userWatcher","fetchUsers","prevLimit","limit","Math","ceil","random","fetch","call","response","json","payload","map","user","name","rootWatcher","all","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","counter","state","action","store","createStore","applyMiddleware","run","useTypedSelector","useSelector","Counter","dispatch","useDispatch","className","styles","onClick","Users","idx"],"sourceRoot":""}