{"version":3,"file":"static/js/7515.e502568e.chunk.js","mappings":"+HAqBKA,E,0DAAAA,SAAAA,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAAA,EAAAA,GAAAA,MAAAA,CAAAA,IAAAA,EAAAA,KAcL,IAAMC,EAAuC,CACzCC,MAAO,CACHC,MAAO,OACPC,WAAY,QAEhBC,KAAM,CACFF,MAAO,OACPC,WAAY,SAIdE,GAAeC,EAAAA,EAAAA,eAKjB,CACIC,MAAOP,EAAOI,KACdI,OAAQ,eAMVC,EAAgB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SACrB,GAAwCC,EAAAA,EAAAA,UAAwB,QAAhE,eAAOC,EAAP,KAAqBC,EAArB,KACML,GAASM,EAAAA,EAAAA,cAAwB,WACnCD,EAAiC,SAAjBD,EAA0B,QAAU,UACrD,CAACA,IACEG,GAAWD,EAAAA,EAAAA,cACb,SAACP,GAAYM,EAAgBN,KAAU,IAErCS,GAAgBC,EAAAA,EAAAA,UAAQ,WAC1B,OAAOjB,EAAOY,KACf,CAACA,IACJ,OACI,SAACP,EAAaa,SAAd,CAAuBC,MAAO,CAC1BX,OAAAA,EACAO,SAAAA,EACAR,MAAOS,GAHX,SAKKN,KAKEU,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,uGAAyBC,EAAzB,+BAA8B,EAA9B,SACiBC,MAAM,gCAAD,OAAiCD,IAC9CE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAFnC,2GAKA,IAAMC,EAA0B,WAC5B,OAA0BC,EAAAA,EAAAA,YAAWtB,GAA7BE,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,OACI,mBACIoB,MAAO,CACH1B,MAAOK,EAAML,MACbC,WAAYI,EAAMJ,YAEtB0B,QAASrB,EALb,SAOKD,IAAUP,EAAOI,KAAO,QAAU,UAyI/C,UApIc,WACV,OAA4BO,EAAAA,EAAAA,UAAwB,MAApD,eAAOmB,EAAP,KAAeC,EAAf,KAIA,OAHAC,EAAAA,EAAAA,YAAU,YA5Cd,WAsBeZ,OAAAA,EAAAA,MAAAA,KAAAA,YAuBPA,GAAYG,MAAK,SAAAO,GAAYC,EAAUD,QACxC,KAEC,4BACI,kCACKA,QADL,IACKA,OADL,EACKA,EAAQG,KADb,aACsBH,QADtB,IACsBA,OADtB,EACsBA,EAAQI,OAD9B,aACyCJ,QADzC,IACyCA,OADzC,EACyCA,EAAQK,YAC7C,0BAAK,oVAiBI,IAjBJ,2CAiBiD,IAjBjD,kXAmCT,SAAC1B,EAAD,WACI,SAACiB,EAAD,OAEJ,0BAAK,84D,qBCpJjB,SAASU,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBxB,EAAQyB,EAAKzB,MACjB,MAAO0B,GAEP,YADAN,EAAOM,GAILD,EAAKE,KACPR,EAAQnB,GAER4B,QAAQT,QAAQnB,GAAOI,KAAKiB,EAAOC,GAIxB,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMrB,GACbiB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQtB,GAGlE,SAASsB,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,GAGnEf,OAAMgB,O","sources":["pages/react/TypeScript/Hooks.tsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\n\ninterface Person {\n    name: string;\n    height: string;\n    mass: string;\n    hair_color: string;\n    skin_color: string;\n    eye_color: string;\n    birth_year: string;\n    gender: Gender;\n    homeworld: string;\n    films: string[];\n    species: string[];\n    vehicles: string[];\n    starships: string[];\n    created: Date;\n    edited: Date;\n    url: string;\n}\n\nenum Gender {\n    Female = \"female\",\n    Male = \"male\",\n    NA = \"n/a\",\n}\n\ninterface Theme {\n    color: string\n    background: string\n}\n\ntype ConcreteTheme = 'light' | 'dark'\n\n// const themes: Record<ConcreteTheme, React.CSSProperties> = {\nconst themes: Record<ConcreteTheme, Theme> = {\n    light: {\n        color: \"#000\",\n        background: \"#eee\"\n    },\n    dark: {\n        color: \"#fff\",\n        background: \"#222\"\n    }\n}\n\nconst ThemeContext = createContext<{\n    theme: Theme,\n    toggle: () => void,\n    setTheme?: (t: ConcreteTheme) => void\n}>(\n    {\n        theme: themes.dark,\n        toggle: () => {\n            //\n        }\n    }\n)\n\nconst ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n    const [currentTheme, setCurrentTheme] = useState<ConcreteTheme>('dark');\n    const toggle = useCallback<() => void>(() => {\n        setCurrentTheme(currentTheme === 'dark' ? 'light' : 'dark')\n    }, [currentTheme]);\n    const setTheme = useCallback<(theme: ConcreteTheme) => void>(\n        (theme) => { setCurrentTheme(theme) }, []\n    )\n    const memoizedTheme = useMemo(() => {\n        return themes[currentTheme]\n    }, [currentTheme])\n    return (\n        <ThemeContext.Provider value={{\n            toggle,\n            setTheme,\n            theme: memoizedTheme\n        }}>\n            {children}\n        </ThemeContext.Provider>\n    )\n}\n\nasync function getPerson(id = 1): Promise<Person> {\n    return await fetch(`https://swapi.dev/api/people/${id}`)\n        .then(response => response.json())\n}\n\nconst ThemesExample: React.FC = () => {\n    const { theme, toggle } = useContext(ThemeContext);\n    return (\n        <button\n            style={{\n                color: theme.color,\n                background: theme.background\n            }}\n            onClick={toggle}\n        >\n            {theme === themes.dark ? 'Light' : 'Dark'}\n        </button>\n    )\n}\n\nconst Hooks = () => {\n    const [person, setPerson] = useState<Person | null>(null);\n    useEffect(() => {\n        getPerson().then(person => { setPerson(person) })\n    }, []);\n    return (\n        <div>\n            <div>\n                {person?.name} - {person?.gender} - {person?.birth_year}\n                <pre><code>\n                    {\n                        `import React, { useEffect, useState } from 'react';\n\ninterface Person {\n    name: string;\n    birth_year: string;\n    gender: Gender;\n}\n\nenum Gender {\n    Female = \"female\",\n    Male = \"male\",\n    NA = \"n/a\",\n}\n\nasync function getPerson(id = 1): Promise<Person> {\n    return await fetch(${\"`\"}https://swapi.dev/api/people/${`$`}{id}${\"`\"})\n        .then(response => response.json())\n}\n\nconst App = () => {\n    const [person, setPerson] = useState<Person | null>(null);\n    useEffect(() => {\n        getPerson().then(person => { setPerson(person) })\n    }, []);\n    return (\n        <div>\n            {person?.name} - {person?.gender} - {person?.birth_year}\n        </div>\n    );\n}\n`}\n                </code></pre>\n            </div>\n            <ThemeProvider>\n                <ThemesExample />\n            </ThemeProvider>\n            <pre><code>\n                {\n                    `import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\n\ninterface Theme {\n    color: string\n    background: string\n}\n\ntype ConcreteTheme = 'light' | 'dark'\n\nconst themes: Record<ConcreteTheme, Theme> = {\n    light: {\n        color: \"#000\",\n        background: \"#eee\"\n    },\n    dark: {\n        color: \"#fff\",\n        background: \"#222\"\n    }\n}\n\nconst ThemeContext = createContext<{\n    theme: Theme,\n    toggle: () => void,\n    setTheme?: (t: ConcreteTheme) => void\n}>(\n    {\n        theme: themes.dark,\n        toggle: () => {\n            //\n        }\n    }\n)\n\nconst ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n    const [currentTheme, setCurrentTheme] = useState<ConcreteTheme>('dark');\n    const toggle = useCallback<() => void>(() => {\n        setCurrentTheme(currentTheme === 'dark' ? 'light' : 'dark')\n    }, [currentTheme]);\n    const setTheme = useCallback<(theme: ConcreteTheme) => void>(\n        (theme) => { setCurrentTheme(theme) }, []\n    )\n    const memoizedTheme = useMemo(() => {\n        return themes[currentTheme]\n    }, [currentTheme])\n    return (\n        <ThemeContext.Provider value={{\n            toggle,\n            setTheme,\n            theme: memoizedTheme\n        }}>\n            {children}\n        </ThemeContext.Provider>\n    )\n}\n\nconst ThemesExample: React.FC = () => {\n    const {theme, toggle} = useContext(ThemeContext);\n    return (\n        <button\n            style={{\n                color: theme.color,\n                background: theme.background\n            }}\n            onClick={toggle}\n        >\n            {theme === themes.dark ? 'Light' : 'Dark'}\n        </button>\n    )\n}\n\nconst App = () => {\n    return (\n        <ThemeProvider>\n            <ThemesExample />\n        </ThemeProvider>\n    );\n}\n`}\n            </code></pre>\n        </div>\n    );\n}\n\nexport default Hooks;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Gender","themes","light","color","background","dark","ThemeContext","createContext","theme","toggle","ThemeProvider","children","useState","currentTheme","setCurrentTheme","useCallback","setTheme","memoizedTheme","useMemo","Provider","value","getPerson","id","fetch","then","response","json","ThemesExample","useContext","style","onClick","person","setPerson","useEffect","name","gender","birth_year","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}