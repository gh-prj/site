{"version":3,"file":"static/js/805.ae105433.chunk.js","mappings":"qLACA,MAA4B,kC,SC2B5B,EAxBuB,WACnB,OAA0BA,EAAAA,EAAAA,UAAiB,IAA3C,eAAOC,EAAP,KAAcC,EAAd,KACMC,ECJK,SAA8BF,EAASG,GAClD,OAA4CJ,EAAAA,EAAAA,UAAYC,GAAxD,eAAOE,EAAP,KAAuBE,EAAvB,KASA,OARAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,EAAkBJ,KACnBG,GACH,OAAO,WACHK,aAAaF,MAElB,CAACN,EAAOG,IACJD,EDNgBO,CAAkBT,EAAO,KAIhD,OACI,iBAAKU,UAAWC,EAAhB,WACI,kBACIC,KAAK,OACLZ,MAAOA,EACPa,SARK,SAACC,GACdb,EAASa,EAAEC,OAAOf,QAQVgB,YAAY,eAEhB,mGACA,kBACIJ,KAAK,OACLZ,MAAOE,EACPe,UAAQ","sources":["webpack://gh-react-site/./src/pages/react/DebouncedValue/DebouncedValue.module.scss?afc3","pages/react/DebouncedValue/DebouncedValue.tsx","hooks/useDebouncedValue.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DebouncedValue_container__gv54m\"};","import React, { ChangeEvent, useState } from 'react';\nimport useDebouncedValue from '../../../hooks/useDebouncedValue';\nimport styles from './DebouncedValue.module.scss'\n\nconst DebouncedValue = () => {\n    const [value, setValue] = useState<string>(\"\");\n    const debouncedValue = useDebouncedValue(value, 1000)\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value)\n    }\n    return (\n        <div className={styles.container}>\n            <input\n                type=\"text\"\n                value={value}\n                onChange={onChange}\n                placeholder=\"Type here\"\n            />\n            <p>The result is shown below when the input stays unchanged for 1 second.</p>\n            <input\n                type=\"text\"\n                value={debouncedValue}\n                readOnly\n            />\n        </div>\n    );\n}\n\nexport default DebouncedValue;\n","import {useEffect, useState} from 'react'\n\nexport default function useDebouncedValue<T>(value:T, delay:number):T {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n        return () => {\n            clearTimeout(timer)\n        };\n    }, [value, delay]);\n    return debouncedValue\n}\n"],"names":["useState","value","setValue","debouncedValue","delay","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","useDebouncedValue","className","styles","type","onChange","e","target","placeholder","readOnly"],"sourceRoot":""}