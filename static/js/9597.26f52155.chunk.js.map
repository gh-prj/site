{"version":3,"file":"static/js/9597.26f52155.chunk.js","mappings":"qNAGA,SAASA,EAAsBC,GAqB7B,OAlBiB,SAAoBC,GACnC,IAAIC,EAAWD,EAAKC,SAChBC,EAAWF,EAAKE,SACpB,OAAO,SAAUC,GACf,OAAO,SAAUC,GAGf,MAAsB,oBAAXA,EAEFA,EAAOH,EAAUC,EAAUH,GAI7BI,EAAKC,MAQpB,IAAIC,EAAQP,IAGZO,EAAMC,kBAAoBR,EAC1B,Q,oBC5BMS,EAA0B,CAC5BC,MAAO,GACPC,SAAS,EACTC,MAAO,KACPC,KAAM,EACNC,MAAO,I,UCLLL,EAA0B,CAC5BM,MAAO,GACPJ,SAAS,EACTC,MAAO,MCFEI,GAAcC,EAAAA,EAAAA,IAAgB,CACvCC,KDIuB,WAGV,IAFbC,EAEY,uDAFJV,EACRH,EACY,uCACZ,OAAQA,EAAOc,MACX,KAAKC,EAAAA,EAAAA,YACD,MAAO,CAAEV,SAAS,EAAMC,MAAO,KAAMG,MAAO,IAChD,KAAKM,EAAAA,EAAAA,oBACD,MAAO,CAAEV,SAAS,EAAOC,MAAO,KAAMG,MAAOT,EAAOgB,SACxD,KAAKD,EAAAA,EAAAA,kBACD,MAAO,CAAEV,SAAS,EAAOC,MAAON,EAAOgB,QAASP,MAAO,IAC3D,QACI,OAAOI,ICffI,KFKuB,WAGV,IAFbJ,EAEY,uDAFJV,EACRH,EACY,uCACZ,OAAQA,EAAOc,MACX,KAAKI,EAAAA,EAAAA,YACD,OAAO,kBAAKL,GAAZ,IAAmBR,SAAS,IAChC,KAAKa,EAAAA,EAAAA,kBACD,OAAO,kBAAKL,GAAZ,IAAmBR,SAAS,EAAOC,MAAON,EAAOgB,UACrD,KAAKE,EAAAA,EAAAA,oBACD,OAAO,kBAAKL,GAAZ,IAAmBR,SAAS,EAAOD,MAAOJ,EAAOgB,UACrD,KAAKE,EAAAA,EAAAA,SACD,OAAO,kBAAKL,GAAZ,IAAmBN,KAAMP,EAAOgB,UACpC,QACI,OAAOH,MGnBNM,GAAQC,EAAAA,EAAAA,IAAYV,GAAaW,EAAAA,EAAAA,IAAgBpB,ICL9D,EAA4B,8BAA5B,EAAmE,2B,SCK7DqB,EAAY,SAACC,GAAD,OAAuBA,EAAWC,EAAgB,IAkBpE,EAhBc,WACV,OACI,SAAC,KAAD,CAAUL,MAAOA,EAAjB,UACI,iBAAKM,UAAWD,EAAhB,WACI,4BACI,SAAC,KAAD,CAASE,GAAG,yBAAyBD,UAAW,gBAAGF,EAAH,EAAGA,SAAH,OAAkBD,EAAUC,IAA5E,oBACA,SAAC,KAAD,CAASG,GAAG,yBAAyBD,UAAW,gBAAGF,EAAH,EAAGA,SAAH,OAAkBD,EAAUC,IAA5E,uBAEJ,0BACI,SAAC,KAAD,a,qBCFb,IAAKL,E,gCAAZ,SAAYA,GAAAA,EAAAA,YAAAA,cAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,SAAAA,WAAZ,CAAYA,IAAAA,EAAAA,M,qBCTL,IAAKH,E,gCAAZ,SAAYA,GAAAA,EAAAA,YAAAA,cAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,kBAAAA,oBAAZ,CAAYA,IAAAA,EAAAA","sources":["../node_modules/redux-thunk/es/index.js","pages/react/ReduxThunk/store/reducers/todoReducer.ts","pages/react/ReduxThunk/store/reducers/userReducer.ts","pages/react/ReduxThunk/store/reducers/index.ts","pages/react/ReduxThunk/store/index.ts","webpack://gh-react-site/./src/pages/react/ReduxThunk/components/ReduxThunk.module.scss?a633","pages/react/ReduxThunk/components/ReduxThunk.tsx","pages/react/ReduxThunk/types/todo.ts","pages/react/ReduxThunk/types/user.ts"],"sourcesContent":["/** A function that accepts a potential \"extra argument\" value to be injected later,\r\n * and returns an instance of the thunk middleware that uses that value\r\n */\nfunction createThunkMiddleware(extraArgument) {\n  // Standard Redux middleware definition pattern:\n  // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware\n  var middleware = function middleware(_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        // The thunk middleware looks for any functions that were passed to `store.dispatch`.\n        // If this \"action\" is really a function, call it and return the result.\n        if (typeof action === 'function') {\n          // Inject the store's `dispatch` and `getState` methods, as well as any \"extra arg\"\n          return action(dispatch, getState, extraArgument);\n        } // Otherwise, pass the action down the middleware chain as usual\n\n\n        return next(action);\n      };\n    };\n  };\n\n  return middleware;\n}\n\nvar thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version\n// with whatever \"extra arg\" they want to inject into their thunks\n\nthunk.withExtraArgument = createThunkMiddleware;\nexport default thunk;","import { error } from \"console\";\nimport { TodoAction, TodoActionType, TodoState } from \"../../types/todo\";\n\nconst initialState: TodoState = {\n    todos: [],\n    loading: false,\n    error: null,\n    page: 1,\n    limit: 10\n}\n\nexport const todoReducer = (\n    state = initialState,\n    action: TodoAction\n): TodoState => {\n    switch (action.type) {\n        case TodoActionType.FETCH_TODOS:\n            return { ...state, loading: true }\n        case TodoActionType.FETCH_TODOS_ERROR:\n            return { ...state, loading: false, error: action.payload }\n        case TodoActionType.FETCH_TODOS_SUCCESS:\n            return { ...state, loading: false, todos: action.payload }\n        case TodoActionType.SET_PAGE:\n            return { ...state, page: action.payload}\n        default:\n            return state;\n    }\n}","import Loading from \"../../../../../components/Loading/Loading\";\nimport { UserAction, UserActionType, UserState } from \"../../types/user\";\n\nconst initialState: UserState = {\n    users: [],\n    loading: false,\n    error: null\n}\n\nexport const userReducer = (\n    state = initialState,\n    action: UserAction\n): UserState => {\n    switch (action.type) {\n        case UserActionType.FETCH_USERS:\n            return { loading: true, error: null, users: [] }\n        case UserActionType.FETCH_USERS_SUCCESS:\n            return { loading: false, error: null, users: action.payload }\n        case UserActionType.FETCH_USERS_ERROR:\n            return { loading: false, error: action.payload, users: [] }\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\"\nimport { todoReducer } from \"./todoReducer\"\nimport { userReducer } from \"./userReducer\"\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    todo: todoReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>","// import { legacy_createStore, applyMiddleware} from \"redux\"\nimport { legacy_createStore as createStore, applyMiddleware} from \"redux\"\nimport thunk from \"redux-thunk\"\nimport { rootReducer } from \"./reducers\"\n\n// export const store = legacy_createStore(rootReducer, applyMiddleware(thunk))\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ReduxThunk_container__JTu1I\",\"active\":\"ReduxThunk_active__t3mLD\"};","import React from 'react';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport { Provider } from \"react-redux\"\nimport { store } from \"../store\"\nimport styles from './ReduxThunk.module.scss'\n\nconst setActive = (isActive: boolean) => isActive ? styles.active : \"\";\n\nconst Redux = () => {\n    return (\n        <Provider store={store}>\n            <div className={styles.container}>\n                <nav>\n                    <NavLink to=\"/site/reduxthunk/users\" className={({ isActive }) => setActive(isActive)}>Users</NavLink>\n                    <NavLink to=\"/site/reduxthunk/todos\" className={({ isActive }) => setActive(isActive)}>Todos</NavLink>\n                </nav>\n                <div>\n                    <Outlet />\n                </div>\n            </div>\n        </Provider>\n    );\n}\n\nexport default Redux;\n","type Todo = {\n    \"userId\": number,\n    \"id\": number,\n    \"title\": string,\n    \"completed\": boolean,\n}\n\nexport interface TodoState {\n    todos: Todo[]\n    loading: boolean\n    error: string | null\n    page: number\n    limit: number\n}\n\nexport enum TodoActionType {\n    FETCH_TODOS = \"FETCH_TODOS\",\n    FETCH_TODOS_SUCCESS = \"FETCH_TODOS_SUCCESS\",\n    FETCH_TODOS_ERROR = \"FETCH_TODOS_ERROR\",\n    SET_PAGE = \"SET_PAGE\",\n}\n\ninterface FetchTodosAction {\n    type: TodoActionType.FETCH_TODOS\n}\n\ninterface FetchTodosErrorAction {\n    type: TodoActionType.FETCH_TODOS_ERROR\n    payload: string\n}\n\ninterface FetchTodosSuccessAction {\n    type: TodoActionType.FETCH_TODOS_SUCCESS\n    payload: Todo[]\n}\n\ninterface SetPageAction {\n    type: TodoActionType.SET_PAGE\n    payload: number\n}\n\nexport type TodoAction =\n    | FetchTodosAction\n    | FetchTodosSuccessAction\n    | FetchTodosErrorAction\n    | SetPageAction\n\n","export interface UserState {\n    users: any[]\n    loading: boolean\n    error: string | null\n}\n\nexport enum UserActionType{\n    FETCH_USERS = \"FETCH_USERS\",\n    FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\",\n    FETCH_USERS_ERROR = \"FETCH_USERS_ERROR\",\n}\n\ninterface FetchUsersAction {\n    type: UserActionType.FETCH_USERS\n}\n\ninterface FetchUsersSuccessAction {\n    type: UserActionType.FETCH_USERS_SUCCESS\n    payload: any[]\n}\n\ninterface FetchUsersErrorAction {\n    type: UserActionType.FETCH_USERS_ERROR\n    payload: string | null\n}\n\nexport type UserAction =\n    | FetchUsersAction\n    | FetchUsersSuccessAction\n    | FetchUsersErrorAction"],"names":["createThunkMiddleware","extraArgument","_ref","dispatch","getState","next","action","thunk","withExtraArgument","initialState","todos","loading","error","page","limit","users","rootReducer","combineReducers","user","state","type","UserActionType","payload","todo","TodoActionType","store","createStore","applyMiddleware","setActive","isActive","styles","className","to"],"sourceRoot":""}