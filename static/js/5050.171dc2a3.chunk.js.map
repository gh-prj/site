{"version":3,"file":"static/js/5050.171dc2a3.chunk.js","mappings":"2JAEMA,EAAU,SAACC,GACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,cAAnC,eAAOK,EAAP,KAAcC,EAAd,KAUA,OACI,iCACI,kBACIC,KAAK,OACLC,YAAY,UACZC,SAdK,SAACC,GACdR,EAAUQ,EAAEC,OAAOC,QAcXC,QAZkD,SAACH,GAC3DN,EAAWM,EAAEC,OAA4BC,QAYjCE,QAV6B,SAACJ,GACtCJ,EAAS,MAAD,OAAOI,EAAEK,QAAT,gBAAwBL,EAAEM,cAW9B,gCAAQf,EAAR,QACA,gCAAQE,EAAR,QAAuB,mBACvB,mCAAaE,SA6DzB,UAxDe,WACX,OACI,4BACI,SAACP,EAAD,CACImB,UAAW,MAEf,0BAAK,omBAkBE,IAlBF,MAkBW,IAlBX,mBAkBiC,IAlBjC,cAkBkD,IAlBlD","sources":["pages/react/TypeScript/Events.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst MyInput = (props: React.HTMLProps<HTMLInputElement>) => {\n    const [value1, setValue1] = useState('');\n    const [value2, setValue2] = useState('');\n    const [coord, setCoord] = useState('X: 0, Y: 0');\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue1(e.target.value)\n    }\n    const onKeyUp: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        setValue2((e.target as HTMLInputElement).value)\n    }\n    const onClick: React.MouseEventHandler = (e) => {\n        setCoord(`X: ${e.clientX}, Y: ${e.clientY}`)\n    }\n    return (\n        <>\n            <input\n                type=\"text\"\n                placeholder=\"MyInput\"\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onClick={onClick}\n            />\n            <span> {value1} </span>\n            <span> {value2} </span><br />\n            <span>&nbsp;{coord}</span>\n        </>\n    )\n}\n\nconst Events = () => {\n    return (\n        <div>\n            <MyInput\n                maxLength={12}\n            />\n            <pre><code>\n                {\n                    `import React, { useState } from 'react';\n\nconst MyInput = (props: React.HTMLProps<HTMLInputElement>) => {\n    const [value1, setValue1] = useState('');\n    const [value2, setValue2] = useState('');\n    const [coord, setCoord] = useState('');\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue1(e.target.value)\n    }\n\n    const onKeyUp: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n        setValue2((e.target as HTMLInputElement).value)\n    }\n\n    const onClick: React.MouseEventHandler = (e) => {\n        setCoord(${\"`\"}X: ${\"$\"}{e.clientX}, Y: ${\"$\"}{e.clientY}${\"`\"})\n    }\n\n    return (\n        <>\n            <input\n                type=\"text\"\n                placeholder=\"MyInput\"\n                onChange={onChange}\n                onKeyUp={onKeyUp}\n                onClick={onClick}\n            />\n            <span> {value1} </span>\n            <span> {value2} </span>\n            <span>&nbsp;{coord}</span>\n        </>\n    )\n}\n\nconst App = () => {\n    return (\n        <div>\n            <MyInput maxLength={12} />\n        </div>\n    );\n}\n`}\n            </code></pre>\n        </div>\n    );\n}\n\nexport default Events;\n"],"names":["MyInput","props","useState","value1","setValue1","value2","setValue2","coord","setCoord","type","placeholder","onChange","e","target","value","onKeyUp","onClick","clientX","clientY","maxLength"],"sourceRoot":""}